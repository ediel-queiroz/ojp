# This workflow builds and tests the project on pushes and pull requests to the main branch.
# It uses a Postgres service for integration tests and skips the CI if the commit message contains '[skip ci]'.
# The workflow result is reported in the Actions tab of the repository.
name: Main CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-test:
    name: Build & Test
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        java-version: [ 11, 17, 21, 22 ]

    services:

      mariadb:
        image: mariadb:10.11
        env:
          MARIADB_DATABASE: defaultdb
          MARIADB_USER: testuser
          MARIADB_PASSWORD: testpassword
          MARIADB_ROOT_PASSWORD: rootpassword
        options: >-
          --health-cmd "mysqladmin ping -h localhost -u root -prootpassword"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
        ports:
          - 3307:3306

      mysql:
        image: mysql:8.0
        env:
          MYSQL_DATABASE: defaultdb
          MYSQL_USER: testuser
          MYSQL_PASSWORD: testpassword
          MYSQL_ROOT_PASSWORD: rootpassword
        options: >-
          --health-cmd "mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
        ports:
          - 3306:3306

      #TODO maybe put proprietary DBs in separated workflows, seem to be insufficient memory in github to run all at once
      #oracle:
      #  image: gvenzl/oracle-xe:21-slim
      #  env:
      #    ORACLE_PASSWORD: testpassword
      #    APP_USER: testuser
      #    APP_USER_PASSWORD: testpassword
      #  options: >-
      #    --name ojp-oracle
      #    --health-cmd "echo 'SELECT 1 FROM DUAL;' | sqlplus -s system/testpassword@localhost/XEPDB1"
      #    --health-interval 10s
      #    --health-timeout 5s
      #    --health-retries 5
      #  ports:
      #    - 1521:1521

      #sqlserver:
      #  image: mcr.microsoft.com/mssql/server:2022-latest
      #  env:
      #    ACCEPT_EULA: Y
      #    SA_PASSWORD: TestPassword123!
      #  options: >-
      #    --health-cmd "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P TestPassword123! -Q 'SELECT 1'"
      #    --health-interval 10s
      #    --health-timeout 5s
      #    --health-retries 5
      #  ports:
      #    - 1433:1433

      #db2:
      #  image: ibmcom/db2:11.5.8.0
      #  env:
      #    LICENSE: accept
      #    DB2INSTANCE: db2inst1
      #    DB2INST1_PASSWORD: testpassword
      #    DBNAME: defaultdb
      #    BLU: false
      #    ENABLE_ORACLE_COMPATIBILITY: false
      #    UPDATEAVAIL: NO
      #    TO_CREATE_SAMPLEDB: false
      #    REPODB: false
      #    IS_OSXFS: false
      #    PERSISTENT_HOME: false
      #    HADR_ENABLED: false
      #    ETCD_ENDPOINT: 
      #    ETCD_USERNAME: 
      #    ETCD_PASSWORD: 
      #  options: >-
      #    --name ojp-db2
      #    --health-cmd "db2 connect to defaultdb user testuser using testpassword; db2 'select 1 from sysibm.sysdummy1'"
      #    --health-interval 30s
      #    --health-timeout 10s
      #    --health-retries 5
      #  ports:
      #    - 50000:50000

    steps:

      - name: Git checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Start CockroachDB
        run: |
          docker run --name ojp-cockroachdb -p 26257:26257 -p 8080:8080 -d cockroachdb/cockroach:v24.3.4 start-single-node --insecure
          # Wait for CockroachDB to be ready
          timeout 60 bash -c 'until curl -f http://localhost:8080/health?ready=1 2>/dev/null; do sleep 2; done'

      - name: Start Postgres
        run: |
          docker run --name ojp-postgres \
            -e POSTGRES_USER=testuser \
            -e POSTGRES_PASSWORD=testpassword \
            -e POSTGRES_DB=defaultdb \
            -p 5432:5432 \
            -d postgres:17 \
            -c max_prepared_transactions=100
      
          # Wait for Postgres to become ready (up to 60s)
          timeout 60 bash -c 'until docker exec ojp-postgres pg_isready -U testuser -d defaultdb -h 127.0.0.1; do sleep 2; done'
      
          # Verify setting (should print 100)
          PGPASSWORD=testpassword psql -h 127.0.0.1 -U testuser -d defaultdb -c "SHOW max_prepared_transactions;"

      - name: Set up JDK 22 for ojp-server
        uses: actions/setup-java@v4
        with:
          java-version: 22
          distribution: 'temurin'
          cache: maven

      - name: Build and Install (ojp-grpc-commons)
        run: mvn clean install -pl ojp-grpc-commons -DskipTests -Dgpg.skip=true

      - name: Test (ojp-grpc-commons)
        run: mvn test -pl ojp-grpc-commons -Dgpg.skip=true

      - name: Build (ojp-server)
        run: mvn clean install -DskipTests  -Dgpg.skip=true

      - name: Test (ojp-server)
        run: mvn test -pl ojp-server

      - name: Run (ojp-server)
        run: mvn verify -pl ojp-server -Prun-ojp-server > /tmp/ojp-server.log 2>&1 &

      - name: Wait for ojp-server to start
        run: sleep 10

      - name: Set up JDK ${{ matrix.java-version }} for ojp-grpc-commons and ojp-jdbc-driver
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java-version }}
          distribution: 'temurin'
          cache: maven

      - name: Build (ojp-jdbc-driver)
        run: mvn clean install -pl ojp-jdbc-driver -DskipTests -Dgpg.skip=true

      - name: Test (ojp-jdbc-driver)
        run: mvn test -pl ojp-jdbc-driver -Dgpg.skip=true

      - name: Show ojp-server.log
        if: always()  # ensures it runs even if previous steps fail
        run: cat /tmp/ojp-server.log || echo "/tmp/ojp-server.log not found"

  notify-integration:
    runs-on: ubuntu-latest
    steps:
      - name: Trigger OJP Framework Integration Repo Workflow
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.INTEGRATION_REPO_PAT }}
          repository: Open-J-Proxy/ojp-framework-integration
          event-type: ojp-updated
          client-payload: '{"ref": "${{ github.ref }}", "sha": "${{ github.sha }}"}'