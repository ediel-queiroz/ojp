syntax = "proto3";
option java_multiple_files = true;
package com.openjproxy.grpc;

message ConnectionDetails {
    string url = 1;
    string user = 2;
    string password = 3;
    string clientUUID = 4;
    bytes properties = 6;
    bool isXA = 7;  // Flag to indicate XA connection
    int32 maxXaTransactions = 8;  // Maximum concurrent XA transactions (default: 50)
}

enum DbName {
    H2 = 0;
    MYSQL = 1;
    MARIADB = 2;
    POSTGRES = 3;
    ORACLE = 4;
    SQL_SERVER = 5;
    DB2 = 6;
    UNMAPPED = 7;
}

enum SessionStatus {
    SESSION_ACTIVE = 0;
    SESSION_TERMINATED = 1;
}

//TRX stands for transaction
enum TransactionStatus {
    TRX_ACTIVE = 0;
    TRX_COMMITED = 1;
    TRX_ROLLBACK = 2;
}

message TransactionInfo {
    string transactionUUID = 1;
    TransactionStatus transactionStatus = 2;
}

message SessionInfo {
    string connHash = 1;
    string clientUUID = 2;
    //only set if connection has to be the same among different requests, within transaction boundaries or when using LOB objects.
    string sessionUUID = 3;
    TransactionInfo transactionInfo = 4;
    SessionStatus sessionStatus = 5;
    bool isXA = 6;  // Flag indicating this is an XA session
}

enum ResultType {
    INTEGER = 0;
    RESULT_SET_DATA = 1;
    UUID_STRING = 2;
}

message OpResult {
    SessionInfo session = 1;
    ResultType type = 2;
    bytes value = 3;
    string uuid = 4;
    string flag = 5;
}

message StatementRequest {
    SessionInfo session = 1;
    string sql = 2;
    bytes parameters = 3;
    string statementUUID = 4;
    bytes properties = 5;
}

enum SqlErrorType {
    SQL_EXCEPTION = 0;
    SQL_DATA_EXCEPTION = 1;
}

message SqlErrorResponse {
    string reason = 1;
    string sqlState = 2;
    int32 vendorCode = 3;
    SqlErrorType sqlErrorType = 4;
}

//LT stands for Lob Type
enum LobType {
    LT_BLOB = 0;
    LT_CLOB = 1;
    LT_BINARY_STREAM = 2;
    LT_ASCII_STREAM = 3;
    LT_UNICODE_STREAM = 4;
    LT_CHARACTER_STREAM = 5;
}

message LobReference {
    SessionInfo session = 1;
    string uuid = 2;
    int32 bytesWritten = 3;
    LobType lobType = 4;
    //5 till 6 only used to query Binary streams.
    int32 columnIndex = 5;
    string stmtUUID = 6;
}

message ReadLobRequest {
    LobReference lobReference = 1;
    int64 position = 2;
    int32 length = 3;
}

message LobDataBlock {
    SessionInfo session = 1;
    int64 position = 2;
    bytes data = 3;
    LobType lobType = 4;
    bytes metadata = 5; // Used for Binary stream where the prepared statement has to be created before the execution to set the stream directly to it.
}

message SessionTerminationStatus {
    bool terminated = 1;
}

enum ResourceType {
    RES_RESULT_SET = 0;
    RES_STATEMENT = 1;
    RES_PREPARED_STATEMENT = 2;
    RES_CALLABLE_STATEMENT = 3;
    RES_LOB = 4;
    RES_CONNECTION = 5;
    RES_SAVEPOINT = 6;
}

enum CallType {
    CALL_SET = 0;
    CALL_GET = 1;
    CALL_IS = 2;
    CALL_ALL = 3;
    CALL_NULLS = 4;
    CALL_USES = 5;
    CALL_SUPPORTS = 6;
    CALL_STORES = 7;
    CALL_NULL = 8;
    CALL_DOES = 9;
    CALL_DATA = 10;
    CALL_NEXT = 11;
    CALL_CLOSE = 12;
    CALL_WAS = 13;
    CALL_CLEAR = 14;
    CALL_FIND = 15;
    CALL_BEFORE = 16;
    CALL_AFTER = 17;
    CALL_FIRST = 18;
    CALL_LAST = 19;
    CALL_ABSOLUTE = 20;
    CALL_RELATIVE = 21;
    CALL_PREVIOUS = 22;
    CALL_ROW = 23;
    CALL_UPDATE = 24;
    CALL_INSERT = 25;
    CALL_DELETE = 26;
    CALL_REFRESH = 27;
    CALL_CANCEL = 28;
    CALL_MOVE = 29;
    CALL_OWN = 30;
    CALL_OTHERS = 31;
    CALL_UPDATES = 32;
    CALL_DELETES = 33;
    CALL_INSERTS = 34;
    CALL_LOCATORS = 35;
    CALL_AUTO = 36;
    CALL_GENERATED = 37;
    CALL_RELEASE = 38;
    CALL_NATIVE = 39;
    CALL_PREPARE = 40;
    CALL_ROLLBACK = 41;
    CALL_ABORT = 42;
    CALL_EXECUTE = 43;
    CALL_ADD = 44;
    CALL_ENQUOTE = 45;
    CALL_REGISTER = 46;
    CALL_LENGTH = 47;
}

message TargetCall {
    CallType callType = 1;
    string resourceName = 2;
    bytes params = 3;
    TargetCall nextCall = 4;
}

message CallResourceRequest {
    SessionInfo session = 1;
    ResourceType resourceType = 2;
    string resourceUUID = 3;
    TargetCall target = 4;
    bytes properties = 5;
}

message CallResourceResponse {
    SessionInfo session = 1;
    string resourceUUID = 2;
    bytes values = 3;
}

message ResultSetFetchRequest {
    SessionInfo session = 1;
    string resultSetUUID = 2;
    int32 size = 3;
}

// Represents a distributed transaction identifier (Xid)
message XidProto {
    int32 formatId = 1;
    bytes globalTransactionId = 2;
    bytes branchQualifier = 3;
}

// Request to start an XA transaction
message XaStartRequest {
    SessionInfo session = 1;
    XidProto xid = 2;
    int32 flags = 3;
}

// Request to end an XA transaction
message XaEndRequest {
    SessionInfo session = 1;
    XidProto xid = 2;
    int32 flags = 3;
}

// Request to prepare an XA transaction
message XaPrepareRequest {
    SessionInfo session = 1;
    XidProto xid = 2;
}

// Response for prepare operation
message XaPrepareResponse {
    SessionInfo session = 1;
    int32 result = 2; // XA_OK or XA_RDONLY
}

// Request to commit an XA transaction
message XaCommitRequest {
    SessionInfo session = 1;
    XidProto xid = 2;
    bool onePhase = 3;
}

// Request to rollback an XA transaction
message XaRollbackRequest {
    SessionInfo session = 1;
    XidProto xid = 2;
}

// Request to recover XIDs
message XaRecoverRequest {
    SessionInfo session = 1;
    int32 flag = 2;
}

// Response for recover operation
message XaRecoverResponse {
    SessionInfo session = 1;
    repeated XidProto xids = 2;
}

// Request to forget an XA transaction
message XaForgetRequest {
    SessionInfo session = 1;
    XidProto xid = 2;
}

// Request to set transaction timeout
message XaSetTransactionTimeoutRequest {
    SessionInfo session = 1;
    int32 seconds = 2;
}

// Response for set transaction timeout
message XaSetTransactionTimeoutResponse {
    SessionInfo session = 1;
    bool success = 2;
}

// Request to get transaction timeout
message XaGetTransactionTimeoutRequest {
    SessionInfo session = 1;
}

// Response for get transaction timeout
message XaGetTransactionTimeoutResponse {
    SessionInfo session = 1;
    int32 seconds = 2;
}

// Request to check if two sessions are from the same resource manager
message XaIsSameRMRequest {
    SessionInfo session1 = 1;
    SessionInfo session2 = 2;
}

// Response for isSameRM check
message XaIsSameRMResponse {
    bool isSame = 1;
}

// Generic XA response for operations that don't return specific data
message XaResponse {
    SessionInfo session = 1;
    bool success = 2;
    string message = 3;
}


service StatementService {
    rpc connect(ConnectionDetails) returns (SessionInfo);
    rpc executeUpdate(StatementRequest) returns (OpResult);
    rpc executeQuery(StatementRequest) returns (stream OpResult);
    rpc fetchNextRows(ResultSetFetchRequest) returns (OpResult);
    rpc createLob(stream LobDataBlock) returns (stream LobReference);
    rpc readLob(ReadLobRequest) returns (stream LobDataBlock);
    rpc terminateSession(SessionInfo) returns (SessionTerminationStatus);
    rpc startTransaction(SessionInfo) returns (SessionInfo);
    rpc commitTransaction(SessionInfo) returns (SessionInfo);
    rpc rollbackTransaction(SessionInfo) returns (SessionInfo);
    rpc callResource(CallResourceRequest) returns (CallResourceResponse);
    
    // XA Transaction Operations
    rpc xaStart(XaStartRequest) returns (XaResponse);
    rpc xaEnd(XaEndRequest) returns (XaResponse);
    rpc xaPrepare(XaPrepareRequest) returns (XaPrepareResponse);
    rpc xaCommit(XaCommitRequest) returns (XaResponse);
    rpc xaRollback(XaRollbackRequest) returns (XaResponse);
    rpc xaRecover(XaRecoverRequest) returns (XaRecoverResponse);
    rpc xaForget(XaForgetRequest) returns (XaResponse);
    rpc xaSetTransactionTimeout(XaSetTransactionTimeoutRequest) returns (XaSetTransactionTimeoutResponse);
    rpc xaGetTransactionTimeout(XaGetTransactionTimeoutRequest) returns (XaGetTransactionTimeoutResponse);
    rpc xaIsSameRM(XaIsSameRMRequest) returns (XaIsSameRMResponse);
}